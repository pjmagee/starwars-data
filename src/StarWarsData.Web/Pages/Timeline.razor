@page "/events"
@inject HttpClient Http

<PageTitle>Star Wars Data</PageTitle>

@if (_pagedResult == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudPagination @ref="_pagination" Class="ma-4 sticky" ShowFirstButton="true" ShowLastButton="true" Count="_pages" SelectedChanged="Paginate" />
    
    @* <MudSelect T="string" MultiSelection="true"> *@
    @*     <MudSelectItem T="string">Example A</MudSelectItem> *@
    @*     <MudSelectItem T="string">Example B</MudSelectItem> *@
    @* </MudSelect> *@
    
    <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelineAlign="TimelineAlign.Default" TimelinePosition="TimelinePosition.Alternate" Class="ma-4">
        
        @{
            var isStart = true;
        }
        
        @foreach (var item in _pagedResult.Items)
        {
            var color = GetColor(item);
            var contentAlign = isStart ? Align.Left : Align.Right;
            var yearAlign = isStart ? Align.Right : Align.Left;
            var title = $"{GetTitle(item)} - ({item.Template})";
           

            <MudTimelineItem Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium">
                @* <ItemDot> *@
                @*     <MudIcon Size="Size.Medium" Icon="@"/> *@
                @* </ItemDot> *@
                 <ItemOpposite>
                    <MudText Color="Color.Info" Typo="Typo.h5" Align="yearAlign">
                       @item.Year.ToString("#,###") @Enum.GetName(typeof(Demarcation), item.Demarcation)
                   </MudText>
                </ItemOpposite>
                <ItemContent>
                     <MudExpansionPanels>
                         <MudExpansionPanel Text="@title" MaxHeight="1000" Style="@($"color:{color}; text-align:{contentAlign};")">
                             <MudText Class="mud-text-secondary" Align="contentAlign">
                                 @foreach (var value  in item.Values)
                                 {
                                     @(value)
                                     <br/>
                                 }
                             </MudText>
                         </MudExpansionPanel>
                     </MudExpansionPanels>
                </ItemContent>
               
            </MudTimelineItem>

            isStart = !isStart;
        }
    </MudTimeline>
}

@code {

    private PagedResult<TimelineEvent>? _pagedResult;

    private int _pages = 1;
    private int _pageSize = 15;
    private MudPagination _pagination;

    protected override async Task OnInitializedAsync()
    {
        await Paginate(1);
    }

    private async Task Paginate(int page)
    {
        _pagedResult = await Http.GetFromJsonAsync<PagedResult<TimelineEvent>>($"Timeline?Page={page}&PageSize={_pageSize}");
        _pages = _pagedResult.Total / _pagedResult.Size;
    }

    private string GetTitle(TimelineEvent timelineEvent)
    {
        return string.IsNullOrWhiteSpace(timelineEvent.EventType) ? timelineEvent.Title : $"{timelineEvent.EventType} - {timelineEvent.Title}";
    }

    private string GetColor(TimelineEvent timelineEvent)
    {
        return timelineEvent.Template switch 
        {
            "Event" => Colors.LightBlue.Default,
            
            "War" => Colors.Red.Darken2,
            "Battle" => Colors.Red.Darken3,
            "Duel" => Colors.Red.Darken4,
            
            "Law" => Colors.Orange.Darken1,
            "Treaty" => Colors.Orange.Darken4,
            "Election" => Colors.Yellow.Darken2,
            
            "Campaign" => Colors.Purple.Default,
            
            "Character" => Colors.Green.Default,
            
            "Organization" => Colors.Amber.Default,
            
            "Lightsaber" => Colors.BlueGrey.Darken1,
            "Droid" => Colors.Grey.Darken2,
            
            
            _ => Colors.Blue.Default
        };
    }
}