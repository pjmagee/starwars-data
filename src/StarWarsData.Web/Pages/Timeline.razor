@page "/events"
@inject HttpClient Http

<PageTitle>Star Wars Data</PageTitle>

@if (_pagedResult == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudPagination @ref="_pagination" ShowFirstButton="true" ShowLastButton="true" Count="_pages" Class="mt-4" SelectedChanged="Paginate"  />
    
    <MudTimeline
        TimelineOrientation="TimelineOrientation.Vertical"
        TimelinePosition="TimelinePosition.Alternate">
        @foreach (var item in _pagedResult.Items)
        {
            <MudTimelineItem Color="Color.Info" Size="Size.Small" TimelineAlign="TimelineAlign.Default">
                <ItemOpposite>
                    <MudText Color="Color.Info" Typo="Typo.h5">
                         @item.Year.ToString("#,###") @item.Demarcation.ToString()
                    </MudText>
                </ItemOpposite>
                <ItemContent>
                    <MudText Color="Color.Info" Typo="Typo.h6" GutterBottom="true">@item.Title</MudText>
                    <MudText Class="mud-text-secondary">
                        @foreach (var value  in item.Values)
                        {
                            @(value)
                            <br/>
                        }
                    </MudText>
                </ItemContent>
            </MudTimelineItem>
        }
    </MudTimeline>
}

@code {
    
    private PagedResult<TimelineEvent>? _pagedResult;

    private int _pages = 1;
    private int _pageSize = 20;
    private MudPagination _pagination;

    protected override async Task OnInitializedAsync()
    {
        await Paginate(1);
    }

    private async Task Paginate(int page)
    {
        _pagedResult = await Http.GetFromJsonAsync<PagedResult<TimelineEvent>>($"Timeline?Page={page}&PageSize={_pageSize}");
        _pages = _pagedResult.Total / _pagedResult.Size;
    }
}