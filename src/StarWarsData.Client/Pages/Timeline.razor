@page "/timeline"

@using System.Web
@using TimelineEvent = StarWarsData.Models.Queries.TimelineEvent
@inject HttpClient Http

<PageTitle>Timeline</PageTitle>

<MudGrid>
    <MudItem xs="2">
        @if (_categories is not null)
        {
            <MudSelect T="string" MultiSelection="true" Dense="true" SelectedValues="_selectedCategories" SelectedValuesChanged="SelectedValuesChanged">
                @foreach (var category in _categories)
                {
                    <MudSelectItem T="string" Value="category">
                        @category.Replace("_infobox", string.Empty).Replace("_", " ")
                    </MudSelectItem>
                }
            </MudSelect>
        }
    </MudItem>
    <MudItem xs="10">
        @if (_pagedResult is not null)
        {
            <MudStack 
                Row="false" 
                Spacing="4" 
                Justify="Justify.SpaceBetween">
                
                <MudPagination
                    @bind-Selected="CurrentPage" 
                    Class="ma-4 sticky" 
                    ShowFirstButton="true" 
                    ShowLastButton="true" 
                    Count="_pages" />
                
                <MudTimeline 
                    TimelineOrientation="TimelineOrientation.Vertical" 
                    TimelineAlign="TimelineAlign.Default" 
                    TimelinePosition="TimelinePosition.Alternate" 
                    Class="ma-4" 
                    Modifiers="false">

                    @{
                        var isStart = true;
                    }

                    @foreach (var timelineEvents in _pagedResult.Items)
                    {
                        var contentAlign = isStart ? Align.Left : Align.Right;
                        var yearAlign = isStart ? Align.Right : Align.Left;

                        <MudTimelineItem Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium">
                            <ItemOpposite>
                                <MudText Color="Color.Info" Typo="Typo.h5" Align="yearAlign">@timelineEvents.Year</MudText>
                            </ItemOpposite>
                            <ItemContent>
                                <MudExpansionPanels Dense="true" MultiExpansion="true" Style="max-height: 600px; overflow: auto;">
                                    @foreach (var timelineEvent in timelineEvents.Events)
                                    {
                                        var color = GetColor(timelineEvent);

                                        <MudExpansionPanel Text="@timelineEvent.DisplayTitle" Style="@($"color:{color}; text-align:{contentAlign};")">
                                            <MudCard Outlined="true" Class="ma-2">
                                                @if (timelineEvent.DisplayImageWithoutRevision is not null)
                                                {
                                                    <MudImage Fluid="true" Src="@timelineEvent.DisplayImageWithoutRevision" Alt="" Class="rounded-lg ma-2"/>
                                                }
                                                <MudCardContent>
                                                    @foreach (var item in timelineEvent.Properties)
                                                    {
                                                        @if (item.Links.Count > 0 || item.Values.Count > 0)
                                                        {
                                                            <MudText Typo="Typo.body2">
                                                                <b>@item.Label: </b>
                                                                @foreach (var link in item.Links)
                                                                {
                                                                    <MudLink Class="mr-1" Underline="Underline.Always" Href="@link.Href">@link.Content</MudLink>
                                                                }

                                                                @string.Join(", ", item.Values.Where(x => !item.Links.Any(l => l.Content.Equals(x, StringComparison.OrdinalIgnoreCase))))
                                                            </MudText>
                                                        }
                                                    }
                                                </MudCardContent>
                                            </MudCard>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            </ItemContent>

                        </MudTimelineItem>

                        isStart = !isStart;
                    }
                </MudTimeline>
            </MudStack>
        }
    </MudItem>

</MudGrid>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {

    private GroupedTimelineResult? _pagedResult;
    private string[]? _categories;
    // Initialize _selectedCategories to prevent null issues
    private List<string> _selectedCategories = new(); 

    private int _pages = 1;
    private int _pageSize = 15;
    
    // Change _currentPage to a property to trigger data loading on change
    private int _currentPage = 1;
    private int CurrentPage
    {
        get => _currentPage;
        set
        {
            if (_currentPage != value)
            {
                _currentPage = value;
                // Use Task.Run to avoid blocking and handle async void pattern safely
                _ = Task.Run(() => LoadDataForCurrentPage()); 
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        // Load the first page initially using the helper method
        await LoadDataForCurrentPage(); 
    }

    private async Task LoadCategories()
    {
        _categories = await Http.GetFromJsonAsync<string[]>("Timeline/categories");
    }

    // This method is no longer needed as LoadDataForCurrentPage handles pagination logic
    // private async Task Paginate(int page)
    // {
    //     ...
    // }

    // Helper method to load data based on CurrentPage (property) and _selectedCategories
    private async Task LoadDataForCurrentPage()
    {
        var query = HttpUtility.ParseQueryString(string.Empty);
        query.Add("Page", $"{CurrentPage}"); // Use property CurrentPage
        query.Add("PageSize", $"{_pageSize}");
        foreach (var c in _selectedCategories)
        {
            query.Add("Categories", $"{c}");
        }
        _pagedResult = await Http.GetFromJsonAsync<GroupedTimelineResult>($"Timeline/events?{query}");
        
        // Ensure _pagedResult and Total are checked before division
        _pages = (_pagedResult is not null && _pagedResult.Total > 0 && _pagedResult.Size > 0) 
                 ? (int)Math.Ceiling((double)_pagedResult.Total / _pagedResult.Size) 
                 : 0;
        
        // Reset current page if it becomes invalid after filtering/data change
        if (CurrentPage > _pages && _pages > 0) // Check _pages > 0 to avoid setting to 0
        { 
            _currentPage = 1; // Reset backing field directly to avoid re-triggering setter
            // Re-fetch data for page 1 if the page was reset
            await LoadDataForCurrentPage(); // Call again to load page 1 data
            return; 
        } else if (_pages == 0) {
             _currentPage = 1; // Reset backing field to 1 if there are no pages
        }
        
        await InvokeAsync(StateHasChanged); // Ensure UI updates after fetching data
    }

    private string GetColor(TimelineEvent timelineEvent)
    {
        return timelineEvent.Template!.ToLower() switch 
        {
            "event" => Colors.LightBlue.Lighten1,
            "trade_route" => Colors.Cyan.Default,
            "campaign" => Colors.Shades.Black,
            "mission" => Colors.Gray.Darken4,
            "battle" => Colors.Red.Darken1,
            "duel" => Colors.Red.Darken2,
            "fleet" => Colors.Red.Darken3,
            "war" => Colors.Red.Darken4,
            "disease" => Colors.Green.Darken4,
            "location" => Colors.Blue.Lighten1,
            "city" => Colors.Blue.Darken1,
            "law" => Colors.Green .Darken1,
            "treaty" => Colors.Green .Darken2,
            "election" => Colors.Blue.Darken3,
            "character" => Colors.Brown.Default,
            "government" => Colors.Amber.Darken1,
            "organization" => Colors.Amber.Lighten1,
            "company" => Colors.Amber.Darken3,
            "religion" => Colors.Purple.Lighten1,
            "holocron" => Colors.Purple.Darken1,
            "lightsaber" => Colors.Purple.Darken2,
            "droid" => Colors.BlueGray.Darken2,
            "artifact" => Colors.BlueGray.Darken3,
            _ => Colors.Blue.Default
        };
    }

    // Update signature to match delegate, handle potential nulls
    private async Task SelectedValuesChanged(IEnumerable<string?>? selectedCategories)
    {
        // Filter out nulls and update the list
        _selectedCategories = selectedCategories?.Where(s => s != null).Select(s => s!).ToList() ?? new List<string>();
        // Reset to page 1 when categories change
        _currentPage = 1; // Reset backing field directly
        await LoadDataForCurrentPage(); // Load data for the new page 1
    }

}

