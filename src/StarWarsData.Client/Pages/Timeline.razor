@page "/events"
@using System.Web
@inject HttpClient Http

<PageTitle>Star Wars Data</PageTitle>

 @if (_categories is not null)
{
    <MudSelect T="string" MultiSelection="true" Dense="true" SelectedValues="_selectedCategories" SelectedValuesChanged="SelectedValuesChanged">
        @foreach (var category in _categories)
        {
            <MudSelectItem T="string" Value="category">@category</MudSelectItem>
        }
    </MudSelect>    
}

@if(_pagedResult is not null)
{
    <MudPagination @ref="_pagination" Class="ma-4 sticky" ShowFirstButton="true" ShowLastButton="true" Count="_pages" SelectedChanged="Paginate" />

    <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelineAlign="TimelineAlign.Default" TimelinePosition="TimelinePosition.Alternate" Class="ma-4" DisableModifiers="true">
        
        @{
            var isStart = true;
        }
        
        @foreach (var timelineEvents in _pagedResult.Items)
        {
            var contentAlign = isStart ? Align.Left : Align.Right;
            var yearAlign = isStart ? Align.Right : Align.Left;
           
            <MudTimelineItem Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" >
                 <ItemOpposite>
                     <MudText Color="Color.Info" Typo="Typo.h5" Align="yearAlign">@timelineEvents.Year</MudText>
                </ItemOpposite>
                <ItemContent>
                    <MudExpansionPanels Dense="true" MultiExpansion="true" Style="max-height: 600px; overflow: auto;">
                        @foreach (var timelineEvent in timelineEvents.Events)
                        {
                            var color = GetColor(timelineEvent);
                            
                            <MudExpansionPanel Text="@timelineEvent.DisplayTitle" Style="@($"color:{color}; text-align:{contentAlign};")">
                                <MudCard Outlined="true" Class="ma-2">
                                    @if (timelineEvent.DisplayImageWithoutRevision is not null)
                                    {
                                        <MudImage Fluid="true" Src="@timelineEvent.DisplayImageWithoutRevision" Alt="" Class="rounded-lg ma-2" />
                                    }
                                    <MudCardContent>
                                        @foreach (var item in timelineEvent.Properties)
                                        {
                                            @if (item.Links.Count > 0 || item.Values.Count > 0)
                                            {
                                                <MudText Typo="Typo.body2">
                                                    <b>@item.Label: </b>
                                                    @foreach (var link in item.Links)
                                                    {
                                                        <MudLink Class="mr-1" Underline="Underline.Always" Href="@link.Href">@link.Content</MudLink>
                                                    }
                                                    
                                                    @string.Join(", ", item.Values.Where(x => !item.Links.Any(l => l.Content.Equals(x, StringComparison.OrdinalIgnoreCase))))
                                                </MudText>
                                            }
                                        }
                                    </MudCardContent>
                                </MudCard>
                            </MudExpansionPanel>    
                        }
                    </MudExpansionPanels>
                </ItemContent>
               
            </MudTimelineItem>

            isStart = !isStart;
        }
    </MudTimeline>
}

@code {

    private GroupedTimelineResult? _pagedResult;
    private string[]? _categories;
    private List<string>? _selectedCategories;

    private int _pages = 1;
    private int _pageSize = 15;
    private MudPagination _pagination;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        _categories = await Http.GetFromJsonAsync<string[]>("Timeline/categories");
        StateHasChanged();
    }

    private async Task Paginate(int page)
    {
        var query = HttpUtility.ParseQueryString(string.Empty);
        
        query.Add("Page", $"{page}");
        query.Add("PageSize", $"{_pageSize}");
       
        foreach (var c in _selectedCategories ?? Enumerable.Empty<string>())
        {
            query.Add("Categories", $"{c}");
        }
        
        _pagedResult = await Http.GetFromJsonAsync<GroupedTimelineResult>($"Timeline?{query}");
        _pages = _pagedResult.Total / _pagedResult.Size;
    }

    private string GetTitle(TimelineEvent timelineEvent)
    {
        return string.IsNullOrWhiteSpace(timelineEvent.DateEvent) ? timelineEvent.Title : $"{timelineEvent.DateEvent} - {timelineEvent.Title}";
    }

    private string GetColor(TimelineEvent timelineEvent)
    {
        return timelineEvent.Template switch 
        {
            "Event" => Colors.LightBlue.Lighten1,
            "Campaign" => Colors.Shades.Black,
            "Mission" => Colors.Grey.Darken4,
            "War" => Colors.Red.Darken4,
            "Battle" => Colors.Red.Darken3,
            "Duel" => Colors.Red.Darken2,
            "Fleet" => Colors.Red.Lighten1,
            "Disease" => Colors.Green.Darken4,
            "Location" => Colors.Blue.Lighten1,
            "City" => Colors.Blue.Default,
            "Law" => Colors.Blue.Darken1,
            "Treaty" => Colors.Blue.Darken2,
            "Election" => Colors.Blue.Darken3,
            "Character" => Colors.Green.Default,
            "Government" => Colors.Amber.Darken1,
            "Organization" => Colors.Amber.Darken2,
            "Company" => Colors.Amber.Darken3,
            "Lightsaber" => Colors.Purple.Darken1,
            "Droid" => Colors.BlueGrey.Darken2,
            "Artifact" => Colors.BlueGrey.Darken3,
            _ => Colors.Blue.Default
        };
    }

    private async Task SelectedValuesChanged(IEnumerable<string> selectedCategories)
    {
        _selectedCategories = new List<string>(selectedCategories);
        
        await Paginate(1);
        StateHasChanged();
    }
}