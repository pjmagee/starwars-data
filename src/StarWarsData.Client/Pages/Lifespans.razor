@page "/lifespans"
@using System.Web
@inject HttpClient Http

<PageTitle>Character Life spans</PageTitle>

@if (_pagedResult is not null)
{
    <MudPagination @ref="_pagination" Class="ma-4 sticky" ShowFirstButton="true" ShowLastButton="true" Count="_pages" SelectedChanged="Paginate"  />
    <MudChart 
        ChartType="ChartType.Line" 
        ChartSeries="SeriesData"
        XAxisLabels="Labels" 
        Width="100%" 
        Height="800px"  
        LegendPosition="Position.Top" 
        ChartOptions="_options" />
}

@code {

    private PagedChartData? _pagedResult;
    private int _pages = 1;
    private int _pageSize = 5;
    private MudPagination _pagination = null!;
    private readonly ChartOptions _options = new() { DisableLegend = true, XAxisLines = false, YAxisLines = true, YAxisFormat = "##,###0 years" };

    private string[] Labels => _pagedResult!.ChartData.Labels;
    private List<ChartSeries> SeriesData => _pagedResult!.ChartData.Series.Take(1).Select(x => new ChartSeries() { Data = x.Data.Select(i => (double) i).ToArray(), Name = "Ages" }).ToList();

    protected override async Task OnInitializedAsync()
    {
        await Paginate(1);
    }

    private async Task Paginate(int page)
    {
        var query = HttpUtility.ParseQueryString(string.Empty);

        query.Add("Page", $"{page}");
        query.Add("PageSize", $"{_pageSize}");

        _pagedResult = await Http.GetFromJsonAsync<PagedChartData>($"characters/charts/lifespans?{query}");
        _pages = _pagedResult.Total / _pagedResult.PageSize;
    }
}