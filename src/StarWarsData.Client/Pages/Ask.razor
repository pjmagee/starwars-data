@page "/ask"
@using MudBlazor.Charts
@inject HttpClient Http

<MudTextField @bind-Value="_prompt"
              Placeholder="Ask for a chart…"
              Variant="Variant.Filled"
              Class="mb-2" />

<MudButton OnClick="Load" Color="Color.Primary">Run</MudButton>

@* Dynamically render the right chart *@
<div class="mt-4">
    @_chartFragment
</div>

@code {
    
    string _prompt = "";
    private RenderFragment? _chartFragment;

    public async Task Load()
    {
        var response = await Http.PostAsJsonAsync("kernel/ask", new UserPrompt(_prompt));

        if (response.IsSuccessStatusCode)
        {
            var chartSpec = await response.Content.ReadFromJsonAsync<AskChart>();
            _chartFragment = RenderChart(chartSpec);
            StateHasChanged();
        }
        else
        {
            _chartFragment = null;
            StateHasChanged();
        }
        
    }

    RenderFragment RenderChart(AskChart spec) => builder =>
    {
        var seq = 0;

        switch (spec.AskChartType)
        {
            // All of these map to <MudChart>
            case AskChartType.Bar:
            case AskChartType.Line:
            case AskChartType.Pie:
            case AskChartType.Donut:
                builder.OpenComponent<MudChart>(seq++);
                var mudType = spec.AskChartType switch
                {
                    AskChartType.Bar => ChartType.Bar,
                    AskChartType.Line => ChartType.Line,
                    AskChartType.Pie => ChartType.Pie,
                    AskChartType.Donut => ChartType.Donut
                };
                
                builder.AddAttribute(seq++, nameof(MudChart.ChartType), mudType);

                if(spec.Labels?.Any() == true)
                {
                    builder.AddAttribute(seq++, nameof(MudChart.InputLabels), spec.Labels.ToArray());
                }
                
                if (spec.Series?.Any() == true)
                {
                    builder.AddAttribute(seq++, nameof(MudChart.ChartSeries),
                        spec.Series.Select(s => new ChartSeries()
                            {
                                Name = s.Name,
                                Data = s.Data.ToArray()
                            }
                        ).ToList()
                    );
                }

                if (spec.XAxisLabels?.Any() == true)
                {
                    builder.AddAttribute(seq++, nameof(MudChart.XAxisLabels), spec.XAxisLabels.ToArray());
                }
                
                builder.CloseComponent();
                break;

            // TimeSeries → <MudTimeSeriesChart> (completely different API)
            case AskChartType.TimeSeries:
                builder.OpenComponent<MudTimeSeriesChart>(seq++);
                // map your time‐series DTO to MudTimeSeriesChart.Series
                if (spec.TimeSeries?.Any() == true)
                    builder.AddAttribute(seq++, nameof(MudTimeSeriesChart),
                        spec.TimeSeries
                            .Select(ts => new TimeSeriesChartSeries()
                                {
                                    Name = ts.Name,
                                    Data = ts.Data.Select(dp => new TimeSeriesChartSeries.TimeValue(dp.X, dp.Y)).ToList()
                                }).ToArray()
                    );

                builder.AddAttribute(seq++, nameof(MudTimeSeriesChart.ChartType), ChartType.Timeseries);
                builder.CloseComponent();
                break;

            default:
                builder.AddContent(seq++, $"Unknown chart type: {spec.AskChartType}");
                break;
        }
    };

}