@page "/births-and-deaths"
@using System.Web
@inject HttpClient Http

<PageTitle>Character Births and Deaths</PageTitle>

@if (_pagedResult is not null)
{
    <MudPagination @ref="_pagination" Class="ma-4 sticky" ShowFirstButton="true" ShowLastButton="true" Count="_pages" SelectedChanged="Paginate"/>
    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@Labels" Width="100%" Height="800px" LegendPosition="Position.Top" />
}

@code {

    private PagedChartData? _pagedResult;
    private int _pages = 1;
    private int _pageSize = 10;
    private MudPagination _pagination = null!;


    public string[] Labels => _pagedResult!.ChartData.Labels;

    public List<ChartSeries> Series => _pagedResult!.ChartData.Series.Select(x =>
    {
        return new ChartSeries()
        {
            Name = x.Name,
            Data = x.Data.Select(i => (double)i).ToArray()
        };
    }).ToList();

    protected override async Task OnInitializedAsync()
    {
        await Paginate(1);
    }

    private async Task Paginate(int page)
    {
        var query = HttpUtility.ParseQueryString(string.Empty);

        query.Add("Page", $"{page}");
        query.Add("PageSize", $"{_pageSize}");

        _pagedResult = await Http.GetFromJsonAsync<PagedChartData>($"characters/charts/births-deaths?{query}");
        _pages = _pagedResult.Total / _pagedResult.PageSize;
    }

}