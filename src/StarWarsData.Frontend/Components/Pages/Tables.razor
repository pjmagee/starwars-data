@page "/tables"
@rendermode InteractiveAuto
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Tables</PageTitle>

@if (_categories == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudSelect
        T="string"
        ValueChanged="@ValueChanged"
        Class="mb-8"
        Placeholder="Select a Star wars Data category">
        
        @foreach (var item in _categories)
        {
            <MudSelectItem Value="@item" T="string">
                @item
            </MudSelectItem>
        }
        
    </MudSelect>
}

@if (_category is not null)
{
    <MudTable 
        ServerData="ServerReload" 
        FixedHeader="true"
        FixedFooter="true" 
        Height="1000px" 
        ReadOnly="true" 
        Dense="true" 
        @ref="_table" 
        Bordered="true"
        Striped="true" 
        HorizontalScrollbar="true">
        
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Page</MudTh>
            <MudTh>Image</MudTh>
            @foreach (var item in DynamicHeaders)
            {
                <MudTh>@item</MudTh>
            }
            <MudTh>Relationships</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.PageId</MudTd>
            <MudTd DataLabel="Page">
                <MudLink Href="@context.PageUrl">@context.PageTitle</MudLink>
            </MudTd>
            <MudTd DataLabel="Image">
                @if (!string.IsNullOrEmpty(context.ImageUrl))
                {
                    <MudImage Src="@context.ImageUrl.Split("/revision", StringSplitOptions.RemoveEmptyEntries)[0]"/>
                }
            </MudTd>
            @foreach (var label in DynamicHeaders)
            {
                var data = context.Data.FirstOrDefault(d => d.Label == label);

                <MudTd DataLabel="@label">
                    @if (data is not null)
                    {
                        <MudList T="string" Gutters="false" Padding="false" Dense="true" Class="mb-4">
                            @foreach (var link in data.Links)
                            {
                                <MudListItem Dense="true" Gutters="false" Ripple="false">
                                    <MudLink Class="ma-1" Href="@link.Href">@link.Content</MudLink>
                                </MudListItem>
                            }
                            @foreach (var value in data.Values.Where(v => !data.Links.Any(l => l.Content.Equals(v, StringComparison.OrdinalIgnoreCase))))
                            {
                                <MudListItem Dense="true" Gutters="false" Ripple="false">@value</MudListItem>
                            }
                        </MudList>
                    }
                </MudTd>
            }
            <MudTh>
                @if (context.Relationships.Any())
                {
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context))">@(context.ShowRelationships ? "Hide" : "Show")</MudButton>    
                }
            </MudTh>
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowRelationships)
            {
                <MudTr>
                    <MudTd colspan="@(DynamicHeaders.Count() + 4)">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">Mentioned</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable 
                                    Items="@context.Relationships" 
                                    Context="Relationship"
                                    Hover="true"
                                    Breakpoint="Breakpoint.Sm" 
                                    Elevation="0">
                                    <HeaderContent>
                                        <MudTh>Page</MudTh>
                                        <MudTh>Template</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Page">@Relationship.PageTitle</MudTd>
                                        <MudTd DataLabel="Template">@Relationship.Template</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </MudTd>
                </MudTr>
            }
        </ChildRowContent>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}

@code {

    private string[]? _categories;
    private string? _category;

    private MudTable<InfoboxRecord>? _table;
    private PagedResult? _pagedResult;
    
    private HttpClient Http => HttpClientFactory.CreateClient("StarWarsData");

    private IEnumerable<string> DynamicHeaders
    {
        get
        {
            if (_pagedResult is not null)
            {
                foreach (var item in _pagedResult.Items.SelectMany(record => record.Data.Select(property => property.Label).OrderBy(v => v)).Distinct())
                {
                    yield return item;
                }
            }
        }
    }

    private void ShowBtnPress(InfoboxRecord record)
    {
        record.ShowRelationships = !record.ShowRelationships;
    }

    protected override async Task OnInitializedAsync()
    {
        string[]? categories = (await Http.GetFromJsonAsync<string[]>("Categories"))!;
        _categories = categories.OrderBy(x => x).ToArray();
    }

    private async Task<TableData<InfoboxRecord>> ServerReload(TableState state, CancellationToken ct)
    {
        if (_category == null)
            return new TableData<InfoboxRecord>() { Items = Enumerable.Empty<InfoboxRecord>(), TotalItems = 0 };

        _pagedResult = await Http.GetFromJsonAsync<PagedResult>($"Categories/{_category}?Page={(state.Page + 1)}&PageSize={state.PageSize}");

        return new TableData<InfoboxRecord>() { TotalItems = _pagedResult.Total, Items = _pagedResult.Items };
    }

    private Task ValueChanged(string arg)
    {
        _category = arg;
        return _table.ReloadServerData();
    }
}