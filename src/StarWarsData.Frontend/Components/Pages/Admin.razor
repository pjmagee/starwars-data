@page "/admin"
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@inject StarWarsData.Frontend.Services.EndpointService EndpointService

<PageTitle>Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-16 px-8">
    <MudText Typo="Typo.h3" GutterBottom="true" Class="mb-6">Admin Panel</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-8">Start background jobs and monitor their progress</MudText>

    <!-- Job Actions -->
    <MudPaper Class="pa-6 mb-6" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-4">Available Jobs</MudText>
        <MudStack Spacing="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download"
                OnClick="@(() => StartJobHandler(DownloadInfoboxesEndpoint))" Disabled="_isLoading" Size="Size.Large">
                Download Infoboxes
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.CloudSync"
                OnClick="@(() => StartJobHandler(SyncWookieepediaEndpoint))" Disabled="_isLoading" Size="Size.Large">
                Sync Wookieepedia Pages
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.AccountTree"
                OnClick="@(() => StartJobHandler(ProcessRelationshipsEndpoint))" Disabled="_isLoading"
                Size="Size.Large">
                Process Relationships
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Psychology"
                OnClick="@(() => StartJobHandler(CreateEmbeddingsEndpoint))" Disabled="_isLoading" Size="Size.Large">
                Create Embeddings
            </MudButton>            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Timeline"
                OnClick="@(() => StartJobHandler(CreateTimelineEventsEndpoint))" Disabled="_isLoading"
                Size="Size.Large">
                Create Categorized Timeline Events
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Group"
                OnClick="@(() => StartJobHandler(AddCharacterRelationshipsEndpoint))" Disabled="_isLoading"
                Size="Size.Large">
                Add Character Relationships
            </MudButton>

            <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                OnClick="@(() => StartJobHandler(CreateVectorIndexEndpoint))" Disabled="_isLoading" Size="Size.Large">
                Create Vector Indexes
            </MudButton>

            <MudDivider Class="my-2" />

            <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                OnClick="@(() => StartJobHandler(DeleteCollectionsEndpoint))" Disabled="_isLoading" Size="Size.Large">
                Delete Collections
            </MudButton>

            <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteSweep"
                OnClick="@(() => StartJobHandler(DeleteEmbeddingsEndpoint))" Disabled="_isLoading" Size="Size.Large">
                Delete Embeddings
            </MudButton>

            <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Remove"
                OnClick="@(() => StartJobHandler(DeleteVectorIndexEndpoint))" Disabled="_isLoading" Size="Size.Large">
                Delete Vector Indexes
            </MudButton>
        </MudStack>
    </MudPaper> <!-- Hangfire Dashboard -->
    <MudPaper Class="pa-6" Elevation="2">
        <MudText Typo="Typo.h5" Class="mb-4">Job Monitoring</MudText>
        <MudText Typo="Typo.body1" Class="mb-4">
            Monitor job progress, view logs, and manage running jobs in the Hangfire Dashboard.
        </MudText>        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Dashboard"
            Href="@_hangfireDashboardUrl" Target="_blank" Size="Size.Large" Disabled="@(_hangfireDashboardUrl == null)">
            Open Hangfire Dashboard
        </MudButton>
    </MudPaper>
</MudContainer>

@code {    // API endpoints for job creation
    private const string DownloadInfoboxesEndpoint = "admin/infobox/download";
    private const string ProcessRelationshipsEndpoint = "admin/infobox/relationships";
    private const string CreateEmbeddingsEndpoint = "admin/mongo/create-embeddings";
    private const string CreateTimelineEventsEndpoint = "admin/mongo/create-categorized-timeline-events";
    private const string SyncWookieepediaEndpoint = "admin/wookieepedia/sync";
    private const string DeleteCollectionsEndpoint = "admin/mongo/delete-collections";
    private const string DeleteEmbeddingsEndpoint = "admin/mongo/delete-embeddings";
    private const string CreateVectorIndexEndpoint = "admin/mongo/create-index-embeddings";
    private const string DeleteVectorIndexEndpoint = "admin/mongo/delete-index-embeddings";
    private const string AddCharacterRelationshipsEndpoint = "admin/mongo/add-character-relationships";    private bool _isLoading = false;
    private string? _hangfireDashboardUrl;
    private HttpClient Http => HttpClientFactory.CreateClient("StarWarsData");
    private HttpClient Api => HttpClientFactory.CreateClient("StarWarsData");

    protected override void OnInitialized()
    {
        _hangfireDashboardUrl = EndpointService.GetHangfireDashboardUrl();
    }
    
    private async Task StartJobHandler(string endpoint)
    {
        try
        {
            _isLoading = true;
            var response = await Http.PostAsync($"api/{endpoint}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Job started successfully! Check Hangfire dashboard for status.", Severity.Success);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to start job: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting job: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
}